@page "/"
@using ArquivoCsvBlazorApp.Generator
@using System.Globalization
@using System.Text
@using CsvHelper
@using CsvHelper.Configuration
@inject IJSRuntime JS
@inject HttpClient HttpClient

<PageTitle>Gerar arquivo CSV</PageTitle>

<div class="card-form">
    <MudPaper Elevation="3" Class="pa-16">
        <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-10">Olá, gere seu arquivo CSV para teste no COC!</MudText>
        <MudForm>
            <MudTextField @bind-Value="Quantity" Immediate="true" Label="Quantidade de registros" InputMode="InputMode.tel" InputType="InputType.Number" />
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Info" Class="mt-7" Style="width: 100%" @onclick="Generate">Criar</MudButton>
        </MudForm>
    </MudPaper>
</div>
<br />
<h3>Teste de paineis seletores</h3>
<MudGrid Style="padding: 50px">
    <MudItem xs="12" sm="5">
        <MudPaper>
            <MudList Clickable="true" @bind-SelectedItem="selectedItemLeft" @bind-SelectedValue="ItemListaEsquerda" Style="height: 260px;overflow-y: auto">
                @{
                    foreach (var item in ListaEsquerda)
                    {
                        <MudListItem Text="@item" Value="@item" />
                    }
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="2" Style="display: flex; flex-direction: column; align-items: center;">
        <div style="display: flex; flex-direction: row; gap: 10px;">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowLeft" OnClick="@AddInListLeft" />
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowRight" OnClick="@AddInListRigth" />
        </div>
    </MudItem>

    <MudItem xs="12" sm="5">
        <MudPaper>
            <MudList Clickable="true" @bind-SelectedItem="selectedItemRigth" @bind-SelectedValue="ItemListaDireita" Style="height: 260px;overflow-y: auto">
                @{
                    foreach (var item in ListaDireita)
                    {
                        <MudListItem Text="@item" Value="@item" />
                    }
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xl="12" md="12" xs="12">

        <MudTable Items="@ListTodos"
                  Loading="isLoading"                  
                  RowsPerPage="pageSize"
                  CurrentPage="currentPage"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  @ref="mudTable"
                  Style="padding: 15px">
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>UserId</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Completed</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Sign">@context.UserId</MudTd>
                <MudTd DataLabel="Name">@context.Title</MudTd>
                <MudTd DataLabel="Position">@context.Completed</MudTd>
            </RowTemplate>
            <LoadingContent>
                <MudText>Carregando...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudPagination 
                    Color="Color.Tertiary"
                    Style="margin-top: 10px;"
                    SelectedChanged="OnPageChange"
                               Count="@count"
                                />
            </PagerContent>
        </MudTable>

    </MudItem>

</MudGrid>



@code
{
    public long? Quantity { get; set; }

    private List<CsvFile> ListRows;
    private List<Todo>? ListTodos;

    public List<string> ListaEsquerda { get; set; }
    public List<string> ListaDireita { get; set; }

    MudListItem selectedItemLeft;
    object ItemListaEsquerda;

    MudListItem selectedItemRigth;
    object ItemListaDireita;

    private int count = 0;
    private int pageSize = 10;
    private int currentPage = 1;
    public bool isLoading = false;


    protected override async Task OnInitializedAsync()
    { 
        isLoading = true;
        ListaEsquerda = new List<string>
    {
        "Item 01",
        "Item 02",
        "Item 03",
        "Item 04",
        "Item 05",
        "Item 06",
        "Item 07",
        "Item 08",
        "Item 09",
        "Item 10"
    };
        ListaDireita = new List<string>();
        ListTodos = new List<Todo>();
        var listCount = await HttpClient.GetFromJsonAsync<List<Todo>>($"todos");
        count = listCount.Count / pageSize;
        ListTodos = await HttpClient.GetFromJsonAsync<List<Todo>>($"todos?_limit={pageSize}&_page={currentPage}");
        isLoading = false;

    }
    private async Task LoadData()
    {
        isLoading = true;

        var startIndex = (currentPage - 1) * pageSize;
        var endIndex = startIndex + pageSize;
        if (endIndex > count)
        {
            endIndex = count;
        }
        ListTodos = await HttpClient.GetFromJsonAsync<List<Todo>>($"todos?_limit={pageSize}&_page={currentPage}");
        await InvokeAsync(() => StateHasChanged());
        isLoading = false;
    }

    private async Task OnPageChange(int current)
    {
        currentPage = current;
        await LoadData();
    }

    protected async void Generate()
    {
        var random = new Random();
        var generation = new NumberGenerator();
        ListRows = new List<CsvFile>();


        try
        {
            for (var i = 0; i < Quantity; i++)
            {
                var qtdArrays = random.Next(1, 5);
                var listRest = new List<int>();
                var listGrau = new List<int>();
                for (var rg = 0; rg < qtdArrays; rg++)
                {
                    listRest.Add(random.Next(1, 300));
                    listGrau.Add(random.Next(1, 300));
                }

                var personType = random.Next(1, 2);
                var cadastro = personType == 1 ? generation.CpfSemMascara(1) : generation.CnpjSemMascara(1);
                var filial = personType == 1 ? 0 : Convert.ToInt64((cadastro[8..])[..2]);
                var row = new CsvFile(
                    Convert.ToInt64(cadastro[..9]),
                    filial,
                    Convert.ToInt64(cadastro[9..]),
                    Convert.ToInt64(cadastro),
                    personType,
                    string.Join(",", listRest),
                    string.Join(",", listGrau)
                    );
                ListRows.Add(row);
            }

            var configCsv = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    Delimiter = ";"
                };

            using var memoryStream = new MemoryStream();
            await using var writer = new StreamWriter(memoryStream);
            await using (var csv = new CsvWriter(writer, configCsv, false))
            {
                await csv.WriteRecordsAsync(ListRows);
            }
            var arr = memoryStream.ToArray();
            await JS.InvokeVoidAsync("saveAsFile", "file.csv", Convert.ToBase64String(arr));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }


    void AddInListRigth()
    {
        if (ItemListaEsquerda == null) return;
        var itemListaEsquerda = ItemListaEsquerda.ToString();
        ListaDireita.Add(itemListaEsquerda);
        ListaEsquerda.Remove(itemListaEsquerda);
        itemListaEsquerda = null;
        LimparDados();
        StateHasChanged();
    }

    void AddInListLeft()
    {
        if (ItemListaDireita == null) return;
        var itemListaDireita = ItemListaDireita.ToString();
        ListaEsquerda.Add(itemListaDireita);
        ListaDireita.Remove(itemListaDireita);
        itemListaDireita = null;
        LimparDados();
        StateHasChanged();
    }

    void LimparDados()
    {
        selectedItemLeft = null;
        selectedItemRigth = null;
        ItemListaEsquerda = null;
        ItemListaDireita = null;
    }

    private int selectedRowNumber = -1;
    private MudTable<Todo> mudTable;
    private List<string> clickedEvents = new();
    private IEnumerable<Element> Elements = new List<Element>()
    {
        new Element() { Number = 1, Sign = "H", Name = "Hydrogen", Position = 0, Molar = 1.00794 },
        new Element() { Number = 2, Sign = "He", Name = "Helium", Position = 17, Molar = 4.002602 },
        new Element() { Number = 3, Sign = "Li", Name = "Lithium", Position = 0, Molar = 6.941 }
    };

    class Element
    {
        public int Number { get; set; }
        public string Sign { get; set; }
        public string Name { get; set; }
        public int Position { get; set; }
        public double Molar { get; set; }
    }

    class Todo
    {
        public int UserId { get; set; }
        public int Id { get; set; }
        public string Title { get; set; }
        public bool Completed { get; set; }
    }
}
